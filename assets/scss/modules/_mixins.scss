/******************************************************************
Site Name:
Author:

Stylesheet: Mixins Stylesheet

This is where you can take advantage of Sass' great features: Mixins.
I won't go in-depth on how they work exactly,
there are a few articles below that will help do that. What I will
tell you is that this will help speed up simple changes like
changing a color or adding CSS3 techniques gradients.

A WORD OF WARNING: It's very easy to overdo it here. Be careful and
remember less is more.

Helpful:
http://sachagreif.com/useful-sass-mixins/
http://thesassway.com/intermediate/leveraging-sass-mixins-for-cleaner-code
http://web-design-weekly.com/blog/2013/05/12/handy-sass-mixins/

******************************************************************/

@import "bourbon"; // http://bourbon.io/


/*********************
TRANSITION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

$prefixes: ("-webkit-", "-moz-", "-o-", "" );

@mixin transition($transition...) {
  // defining prefixes so we can use them in mixins below
  @each $prefix in $prefixes {
	#{$prefix}transition: $transition;
  }
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdo it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

/*********************
BOX SIZING
*********************/

/* @include box-sizing(border-box); */
/* NOTE: value of "padding-box" is only supported in Gecko. So
probably best not to use it. I mean, were you going to anyway? */
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
	-moz-box-sizing:	$type;
	-ms-box-sizing:	 $type;
	box-sizing:		 $type;
}


/*********************
ANIMATION
*********************/

// In Use :
// @include keyframes(moveTheObject) {
//   0%   { left: 100px; }
//   100% { left: 200px; }
// }

// .object-to-animate {
//   @include animation('moveTheObject .5s 1', 'moveTheObjectAgain .5s 1 .5s');
// } 


@mixin animation($animate...) {
	$max: length($animate);
	$animations: '';

	@for $i from 1 through $max {
		$animations: #{$animations + nth($animate, $i)};

		@if $i < $max {
			$animations: #{$animations + ", "};
		}
	}

	@each $prefix in $prefixes {
		#{$prefix}animation: $animations;
	}
}

@mixin keyframes($animationName) {
	@-webkit-keyframes #{$animationName} {
		@content;
	}
	@-moz-keyframes #{$animationName} {
		@content;
	}
	@-o-keyframes #{$animationName} {
		@content;
	}
	@keyframes #{$animationName} {
		@content;
	}
}



/*********************
CIRCLE & TRIANGLE
*********************/

// Use : 
// .circle {
// 	@include circle(200px, #eee);
// }
// .triangle {
// 	@include triangle(200px, right, #ccc);
// }

@mixin circle($width, $color) {
	width: $width;
	height: $width;
	background-color: $color;
	-moz-background-clip: padding;
	-webkit-background-clip: padding-box;
	background-clip: padding-box;
	@each $prefix in $prefixes {
		#{$prefix}border-radius: $width/2;
	}
}


@mixin triangle($width, $dir, $color) {
	@if $dir == up {
		width: 0;
		height: 0;
		border-top: $width/2 solid transparent;
		border-right: $width/2 solid transparent;
		border-bottom: $width/2 solid $color;
		border-left: $width/2 solid transparent;
	} @else if $dir == down {
		width: 0;
		height: 0;
		border-top: $width/2 solid $color;
		border-right: $width/2 solid transparent;
		border-bottom: $width/2 solid transparent;
		border-left: $width/2 solid transparent;
	} @else if $dir == right {
		width: 0;
		height: 0;
		border-top: $width/2 solid transparent;
		border-right: $width/2 solid $color;
		border-bottom: $width/2 solid transparent;
		border-left: $width/2 solid transparent;
	} @else if $dir == left {
		width: 0;
		height: 0;
		border-top: $width/2 solid transparent;
		border-right: $width/2 solid $color;
		border-bottom: $width/2 solid transparent;
		border-left: $width/2 solid transparent;
	}
}



/*********************
MEDIA QUERIES
*********************/

// Example: 
// @include media-query( max-phone ) {
// 	.header {
// 		width: 100%;
// 	}
// }

@mixin media-query( $media-query ) {

	@if $media-query == min-phone {
		@media only screen and ( min-width: $mobile-min-width ) { @content; }
	}

	@if $media-query == max-phone {
		@media only screen and ( max-width: $mobile-max-width ) { @content; }
	}

	@if $media-query == phablet {
		@media only screen and ( min-width: $mobile-min-width ) and ( max-width: $tablet-max-width ) { @content; }
	}

	@if $media-query == min-tablet {
		@media only screen and ( min-width: $tablet-min-width ) { @content; }
	}

	@if $media-query == max-tablet {
		@media only screen and ( max-width: $tablet-max-width ) { @content; }
	}

	@if $media-query == tablet {
		@media only screen and ( min-width: $tablet-min-width ) and ( max-width: $desktop-max-width ) { @content; }
	}

	@if $media-query == min-desktop {
		@media only screen and ( min-width: $desktop-min-width ) { @content; }
	}

	@if $media-query == max-desktop {
		@media only screen and ( max-width: $desktop-max-width ) { @content; }
	}

	@if $media-query == min-large-desktop {
		@media only screen and ( min-width: $large-desktop-min-width ) { @content; }
	}

	@if $media-query == max-large-desktop {
		@media only screen and ( max-width: $large-desktop-max-width ) { @content; }
	}

	@if $media-query == retina {
		@media only screen and (-webkit-min-device-pixel-ratio: 1.5),
			   only screen and (min--moz-device-pixel-ratio: 1.5),
			   only screen and (min-device-pixel-ratio: 1.5) { @content; }
	}

}